{
  "hash": "ea42c1aed13af79c606516be45b669db",
  "result": {
    "markdown": "# Weitere Optionen {#misc} \n\n\n::: {.cell}\n\n:::\n\n\n\n## `estimates store` auch bei `estpost`\n\nWir können auch die estimates aus einem `estpost` speichern, um sie später wieder aufzurufen - auch nach einem Befehl, der eigentlich `e()` überschreibt.\n\n\n::: {.cell}\n\n```{.stata .cell-code}\nestpost correlate zpalter F518_SUF F200, matrix\nestimates store m1\nxi: reg az i.S1\nest store m2\n\nesttab m1, not unstack compress noobs nonumber nomtitles ///\n\t\t varlabels(zpalter \"(1) Alter\" F518_SUF \"(2) Bruttoeinkommen\" F200 \"(3) Wochenarbeitszeit\") ///\n\t\t eqlabels(\"(1) Alter\" \"(2) Bruttoeinkommen\" \"(3) Wochenarbeitszeit\") ///\n    collabels(none) ///\n\t\t varwidth(22) ///\n\t\t modelwidth(22)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                                    (1) Alter       (2) Bruttoeinkommen     (3) Wochenarbeitszeit   \n----------------------------------------------------------------------------------------------------\n(1) Alter                             1.00000                                                       \n(2) Bruttoeinkommen                   0.07956***                1.00000                             \n(3) Wochenarbeitszeit                -0.05579***                0.29245***                1.00000   \n----------------------------------------------------------------------------------------------------\n```\n:::\n:::\n\n\n\n## Excel-Export\n\n\nFür den Excel-Export können wir einfach `using ...csv` nutzen. Für deutschsprachige Systeme empfiehlt sich dabei aber, statt `,` ein `;` als Spaltentrenner zu verwenden. Das können wir mit der Option `scsv` erreichen.\n\n- `csv` als Dateiendung produziert eine csv-Datei, die mit Excel geöffnet werden kann\n- `nostar` empfiehlt sich für den Excel-Export, da Sternchen in Excel häufig zu Problemen führen\n- `scsv`  `;` anstelle von `,` als Spaltenseparator\n\n\n::: {.cell}\n\n```{.stata .cell-code}\nesttab mod* using \"${results}\\tabelle1.csv\", cells(\"b(fmt(a3)) se(fmt(a3)) ci_l(fmt(a3)) ci_u(fmt(a3)) p(fmt(a3))\") scsv\n```\n:::\n\n\n\n\n<!-- ## Formatierungsoptionen -->\n\n<!--  + `alignment(string)  set alignment within columns (LaTeX, HTML, RTF)` -->\n\n<!-- In LaTeX mode string should be a LaTeX column specifier.  -->\n<!-- The default is to center the columns.  -->\n<!-- To produce right-aligned columns, for example, type alignment(r).  -->\n<!-- If the table contains multiple columns per model/equation, the alignment specification should define all columns.  -->\n<!-- For example, if the wide option is specified, you could type alignment(cr) to, say, center the point estimates and right-align the t-statistics. Note that more sophisticated column definitions are often needed to produce appealing results.  -->\n<!-- In particular, LaTeX's dcolumn package proves useful to align columns on the decimal point. -->\n\n\n<!-- In RTF mode string should be one of l, c, r, and j.  -->\n<!-- The default is to center the columns. To produce right-aligned columns, for example, type alignment(r).  -->\n<!-- The same alignment is used for all columns if the table contains multiple columns per model/equation in the RTF mode. -->\n\n\n<!-- + `fragment`  -->\n\n<!-- ## Schriftart -->\n<!-- `fonttbl(string)    set custom font table (RTF)` -->\n\n\n<!-- `title({\\b Table 1.} {\\i This is the 1{\\super st} table})` -->\n<!-- [Formatierung anpassen](http://repec.org/bocode/e/estout/esttab011d.do) -->\n\n<!--   fonttbl(string) defines a custom font table in RTF. The default is -->\n<!--         \"\\f0\\fnil Times New Roman;\". For example, typing -->\n\n<!--             . esttab using example.rtf, ti(\"\\f1 The Auto Data\") /// -->\n<!--                 fonttbl(\\f0\\fnil Times New Roman;\\f1\\fnil Arial;) -->\n\n<!--         would add a title in Arial. -->\n\n<!-- ## any matrix -->\n\n\n<!-- [esttab any matrix](http://repec.org/bocode/e/estout/advanced.html#advanced905) -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}