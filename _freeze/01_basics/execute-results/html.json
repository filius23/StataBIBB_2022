{
  "hash": "46921d9180e7535bae1569433dbdba9e",
  "result": {
    "markdown": "# Tabellenexport mit Stata: Grundlagen & Pakete {#base} \n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nEs gibt eine ganze Reihe von `ado`s, welche einen Tabellenexport aus Stata erlauben.\n\n\nWir werden mit [`estout`/`esttab`](http://repec.sowi.unibe.ch/stata/estout/) von Ben Jann arbeiten, das einige Vorteile bietet:\nZunächst können damit sowohl Deskriptions- als auch Regressionstabellen exportiert werden - man muss also nur eine Syntaxlogik lernen.\nDabei sind Exportbefehle für (fast) alle gängigen Deskriptionen und Regressionsmodelle vorhanden, inklusive Outputs von `margins`.\nAußerdem können damit Tabellen sowohl in Word-, Latex- und auch Excel-Formate exportiert werden - auch hier ist (fast) die gleiche Syntaxlogik verwendbar.\nDarüber hinaus bietet `esttab` die Möglichkeit einiger Formatierungseinstellungen.\n\nUm `estout`/`esttab` zu verwenden, müssen wir es zunächst installieren:\n\n::: {.cell}\n\n```{.stata .cell-code}\nssc install estout, replace\n```\n:::\n\nDies sind die aktuellen Versionen:\n\n::: {.cell}\n\n```{.stata .cell-code}\nwhich estout // check versions\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n*! version 3.30  25mar2022  Ben Jann\n```\n:::\n:::\n\n::: {.cell}\n\n```{.stata .cell-code}\nwhich esttab // check version\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n*! version 2.1.0  19may2021  Ben Jann\n*! wrapper for estout\n```\n:::\n:::\n\n\nMit `estout`/`esttab` können wir Tabellen mit zusammenfassenden Statistiken und Regressionsergebnissen zu erstellen, die leicht in \\LaTeX oder importiert werden können oder in Word verwendet werden können.\nFür die Latex-Verion ergibt sich der Vorteil, dass das ganze System dynamisch ist. \nWenn wir etwas in unserem Do-File ändern (z. B. eine bestimmte Gruppe weglassen, eine neue Variabe aufnehmen), dann werden die Ergebnisse automatisch in LaTeX aktualisiert. \nDas kann eine Menge Zeit sparen, aber die Einrichtung in Latex ist sehr zeitintensiv und deren Details würden den Rahmen unseres Kurses sprengen.\nIch stelle daher [hier](https://www.overleaf.com/read/cfjbtghnxrcn) eine (sehr einfache) Latexvorlage zur Verfügung, die versierte Latex-Nutzer*innen gerne an Ihre Bedürfnisse anpassen können.\n<!-- https://www.overleaf.com/read/zgnvgxdzzptg -->\n\n## Grundlagen: `e()` und `r()`\n\nGrundsätzlich baut `esttab` auf die Postestimates `e()` auf.\nBei jedem Befehl werden im Hintergrund Werte in Matrizen und Skalere (also Zahlen) abgelegt, bspw. bei einem Regressionsmodell. Mit `ereturn list` können wir uns eine Liste der Postestimates ausgeben lassen:\n\n::: {.cell}\n\n```{.stata .cell-code}\nquietly reg F518_SUF zpalter\nereturn list\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nscalars:\n                  e(N) =  16543\n               e(df_m) =  1\n               e(df_r) =  16541\n                  e(F) =  105.3561454498825\n                 e(r2) =  .0063290815436915\n               e(rmse) =  3525.162828161657\n                e(mss) =  1309236899.97876\n                e(rss) =  205551251614.9366\n               e(r2_a) =  .0062690083366028\n                 e(ll) =  -158590.4618746699\n               e(ll_0) =  -158642.9792418738\n               e(rank) =  2\n\nmacros:\n            e(cmdline) : \"regress F518_SUF zpalter\"\n              e(title) : \"Linear regression\"\n          e(marginsok) : \"XB default\"\n                e(vce) : \"ols\"\n             e(depvar) : \"F518_SUF\"\n                e(cmd) : \"regress\"\n         e(properties) : \"b V\"\n            e(predict) : \"regres_p\"\n              e(model) : \"ols\"\n          e(estat_cmd) : \"regress_estat\"\n\nmatrices:\n                  e(b) :  1 x 2\n                  e(V) :  2 x 2\n\nfunctions:\n             e(sample)   \n```\n:::\n:::\n\n\nDas Grundprinzip ist dann immer:\n\n(@) Auswertungsbefehl\n(@) Tabelle mit `esttab` erstellen\n(@) Tabelle exportieren (durch Anpassung des `esttab`-Befehls)\n\n\nDie Matrizen können wir mit `matrix list`, die `Skalare` mit `scalar list` + Name aufrufen, unter `e(b)` sind beispielsweise die Koeffizienten abgelegt:\n\n::: {.cell}\n\n```{.stata .cell-code}\nmatrix list e(b)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\ne(b)[1,2]\n      zpalter      _cons\ny1  24.622534  2381.2797\n```\n:::\n:::\n\n\nBei vielen deskriptiven Befehlen werden die Kennzahlen hingegen als *results* in `r()` abgelegt. \nAn die Werte in `r()` kommen wird mit `return list`, `ereturn list` für `e()` ist dahingegen leer:\n\n::: {.cell}\n\n```{.stata .cell-code}\nquietly su F518_SUF\nereturn list\nreturn list\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nscalars:\n                  r(N) =  16635\n              r(sum_w) =  16635\n               r(mean) =  3532.108506161707\n                r(Var) =  12467451.86889181\n                 r(sd) =  3530.927904799503\n                r(min) =  1\n                r(max) =  72000\n                r(sum) =  58756625\n```\n:::\n:::\n\n\nDas bringt mit sich, dass wir für Deskriptionen meist mit dem Hilfsbefehl `estpost` die in `r()` abgelegten Ergebnisse in `e()` umwandeln müssen.\nGrundsätzlich sind aber die Ergebnisse aus `e()` und `r()` alle in Tabellen mit `esttab` exportierbar.\n\n\n## Kurs-Setup\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](pics/01_pfade.png){fig-align='center' width=80%}\n:::\n:::\n\n\n:::{.callout-caution collapse=\"true\"}\n# Einstellung für `ssc install` an BIBB-Arbeitsrechnern\n\nUm ados mit `ssc install` installieren zu können, muss die Option `Connect through proxy server` wie folgt gefüllt (und aktiviert) werden:\n\n+ HTTP proxy host: `kessenich.ivbb.bund.de`\n+ Port:  `80`\n  \n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pics/02_install.png){fig-align='center' width=95%}\n:::\n:::\n\n\n::::\n\n## Übung {#init}\n\n+ Generieren Sie einmal `BIBBBAuA_2018_suf1.0_clean.dta` mit Hilfe von `00_init.do` für die weiteren Aufgaben.\n+ Testen Sie einmal `return list` und `erturn list` nach `reg F518_SUF zpalter` bzw.  `su zpalter`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}